/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;


import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Properties;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import proxy.ControladorPedidoPublicador;
import proxy.ControladorPedidoPublicadorService;
import proxy.ControladorUsuarioPublicador;
import proxy.ControladorUsuarioPublicadorService;
import proxy.DataPedido;
import proxy.DataPedidoProduco;
import proxy.DataRestaurante;
import proxy.DataUsuario;
import proxy.EnumEstado;
import proxy.Exception_Exception;
import qomobile.THistorial;
import qomobile.TPedido;
import qomobile.TProducto;

/**
 *
 * @author Mathi
 */
public class QOMobileGUI extends javax.swing.JFrame {
 Properties propiedades = new Properties();
    /**
     * Creates new form QOMobileGUI2
     */
    public QOMobileGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        general = new javax.swing.JPanel();
        sesionCerrada = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        login = new javax.swing.JButton();
        userTXT = new javax.swing.JTextField();
        passTxt = new javax.swing.JTextField();
        verPedido = new javax.swing.JPanel();
        labelInfoPedido = new javax.swing.JLabel();
        labelUsuario = new javax.swing.JLabel();
        usuario = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        fecha = new javax.swing.JLabel();
        labelProductos = new javax.swing.JLabel();
        labelHistorial = new javax.swing.JLabel();
        labelPrecio = new javax.swing.JLabel();
        precio = new javax.swing.JLabel();
        labelEstadoActual = new javax.swing.JLabel();
        estadoActual = new javax.swing.JLabel();
        labelNuevoEstado = new javax.swing.JLabel();
        cambioEstados = new javax.swing.JComboBox();
        volver = new javax.swing.JButton();
        actualizarEstado = new javax.swing.JButton();
        scrollTablaProductos = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        scrollTablaHistorial = new javax.swing.JScrollPane();
        tablaHistorial = new javax.swing.JTable();
        sesionIniciada = new javax.swing.JPanel();
        cerrarSesion = new javax.swing.JButton();
        usuarioLogeado = new javax.swing.JLabel();
        estadoConexion = new javax.swing.JLabel();
        pedidos = new javax.swing.JLabel();
        scrollTablaPedidos = new javax.swing.JScrollPane();
        tablaPedidos = new javax.swing.JTable();
        Actualizar = new javax.swing.JButton();
        ver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(320, 480));
        setResizable(false);

        general.setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("USUARIO:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("PASSWORD:");

        login.setText("LOGIN");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        userTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTXTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sesionCerradaLayout = new javax.swing.GroupLayout(sesionCerrada);
        sesionCerrada.setLayout(sesionCerradaLayout);
        sesionCerradaLayout.setHorizontalGroup(
            sesionCerradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sesionCerradaLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(sesionCerradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(passTxt)
                    .addComponent(userTXT)
                    .addGroup(sesionCerradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        sesionCerradaLayout.setVerticalGroup(
            sesionCerradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sesionCerradaLayout.createSequentialGroup()
                .addContainerGap(149, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );

        general.add(sesionCerrada, "card2");

        labelInfoPedido.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelInfoPedido.setText("INFORMACION DEL PEDIDO");

        labelUsuario.setText("Usuario:");

        usuario.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        usuario.setText("usuario");

        labelFecha.setText("Fecha:");

        fecha.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        fecha.setText("fecha");

        labelProductos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelProductos.setText("Productos:");

        labelHistorial.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelHistorial.setText("Historial:");

        labelPrecio.setText("Precio total:");

        precio.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        precio.setText("precio");

        labelEstadoActual.setText("Estado actual:");

        estadoActual.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        estadoActual.setText("estado");

        labelNuevoEstado.setText("Nuevo estado:");

        cambioEstados.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cambioEstados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambioEstadosActionPerformed(evt);
            }
        });

        volver.setText("Volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });

        actualizarEstado.setText("Actualizar estado");
        actualizarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarEstadoActionPerformed(evt);
            }
        });

        medeloProductos = new DefaultTableModel();
        medeloProductos.addColumn("Producto");
        medeloProductos.addColumn("Cantidad");
        medeloProductos.addColumn("Precio");
        medeloProductos.addColumn("Subtotal");
        tablaProductos = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablaProductos.setModel(medeloProductos);
        scrollTablaProductos.setViewportView(tablaProductos);

        historial = new DefaultTableModel();
        historial.addColumn("Estado");
        historial.addColumn("Fecha");
        tablaHistorial = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column) {
                return column == 4;
            }
        };
        tablaHistorial.setModel(historial);
        scrollTablaHistorial.setViewportView(tablaHistorial);

        javax.swing.GroupLayout verPedidoLayout = new javax.swing.GroupLayout(verPedido);
        verPedido.setLayout(verPedidoLayout);
        verPedidoLayout.setHorizontalGroup(
            verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verPedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(verPedidoLayout.createSequentialGroup()
                        .addComponent(labelUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(usuario)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(verPedidoLayout.createSequentialGroup()
                        .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollTablaProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(verPedidoLayout.createSequentialGroup()
                                .addComponent(labelFecha)
                                .addGap(18, 18, 18)
                                .addComponent(fecha))
                            .addGroup(verPedidoLayout.createSequentialGroup()
                                .addComponent(labelNuevoEstado)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cambioEstados, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(verPedidoLayout.createSequentialGroup()
                                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelEstadoActual)
                                    .addComponent(labelPrecio))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(precio)
                                    .addComponent(estadoActual)))
                            .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, verPedidoLayout.createSequentialGroup()
                                    .addComponent(volver)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(actualizarEstado))
                                .addComponent(scrollTablaHistorial, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(verPedidoLayout.createSequentialGroup()
                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(verPedidoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelProductos))
                    .addGroup(verPedidoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelHistorial))
                    .addGroup(verPedidoLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(labelInfoPedido)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        verPedidoLayout.setVerticalGroup(
            verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verPedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelInfoPedido)
                .addGap(4, 4, 4)
                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUsuario)
                    .addComponent(usuario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFecha)
                    .addComponent(fecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelProductos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTablaProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelHistorial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTablaHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPrecio)
                    .addComponent(precio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEstadoActual)
                    .addComponent(estadoActual))
                .addGap(18, 18, 18)
                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNuevoEstado)
                    .addComponent(cambioEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(verPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actualizarEstado))
                .addGap(101, 101, 101))
        );

        general.add(verPedido, "card2");

        cerrarSesion.setText("Cerrar Sesión");
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });

        usuarioLogeado.setText("usuario");

        estadoConexion.setText("estado conexion");

        pedidos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        pedidos.setText("Pedidos");

        modeloPedidos = new DefaultTableModel();
        modeloPedidos.addColumn("Numero");
        modeloPedidos.addColumn("Cliente");
        modeloPedidos.addColumn("Estado");
        modeloPedidos.addColumn("Fecha");
        tablaPedidos = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablaPedidos.setModel(modeloPedidos);
        scrollTablaPedidos.setViewportView(tablaPedidos);

        Actualizar.setText("Actualizar");
        Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarActionPerformed(evt);
            }
        });

        ver.setText("Ver");
        ver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sesionIniciadaLayout = new javax.swing.GroupLayout(sesionIniciada);
        sesionIniciada.setLayout(sesionIniciadaLayout);
        sesionIniciadaLayout.setHorizontalGroup(
            sesionIniciadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sesionIniciadaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sesionIniciadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sesionIniciadaLayout.createSequentialGroup()
                        .addGroup(sesionIniciadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pedidos)
                            .addGroup(sesionIniciadaLayout.createSequentialGroup()
                                .addComponent(cerrarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(sesionIniciadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usuarioLogeado, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(estadoConexion))))
                        .addGap(0, 26, Short.MAX_VALUE))
                    .addComponent(scrollTablaPedidos, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(sesionIniciadaLayout.createSequentialGroup()
                        .addComponent(Actualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ver)))
                .addContainerGap())
        );
        sesionIniciadaLayout.setVerticalGroup(
            sesionIniciadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sesionIniciadaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sesionIniciadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sesionIniciadaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(usuarioLogeado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(estadoConexion))
                    .addGroup(sesionIniciadaLayout.createSequentialGroup()
                        .addComponent(cerrarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pedidos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTablaPedidos, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sesionIniciadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ver, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Actualizar))
                .addGap(25, 25, 25))
        );

        general.add(sesionIniciada, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(general, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(general, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
                    
        try {
            String usu = userTXT.getText();
            String pass = passTxt.getText();
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("QOMobilePU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();
            
            em.createQuery("DELETE FROM THistorial").executeUpdate();
            
            em.createQuery("DELETE FROM TPedido").executeUpdate();
            
            em.createQuery("DELETE FROM TProducto").executeUpdate();
            
            em.getTransaction().commit();
            
            
            
            if (existeNick(usu)) {
                DataUsuario u = dataUsuario(usu);   
                
                DataRestaurante res = (DataRestaurante) u;
                String contrasenia = u.getPass();
               
                if (pass.equals(contrasenia)) {
                    usuarioLogeado.setText(usu);
                    
                    List<DataPedido> losPedidos = res.getPedidos();
                    if(losPedidos != null){
                        JOptionPane.showMessageDialog(this,"Hay Pedido");
                    for (DataPedido entry : losPedidos) {
                        String[] fila1 = new String[4];
                        fila1[0] = "" + (Integer) entry.getNumero();
                        fila1[1] = entry.getNickNameCliente();
                        fila1[2] = "" + entry.getEstado();
                        fila1[3] = "" + entry.getFechaPedido();
                        modeloPedidos.addRow(fila1);
                        
                    }
                    almacenarPedidos(res);
                    }
                    estadoConexion.setText("Conectado");
                    general.removeAll();
                    general.add(sesionIniciada);
                    general.repaint();
                    general.revalidate();
                }else JOptionPane.showMessageDialog(this,"Usuario o contraseña incorrectos");
            }else JOptionPane.showMessageDialog(this,"Usuario o contraseña incorrectos");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,"No hay conexion!");
            estadoConexion.setText("Desconectado");
        }     
        

    }//GEN-LAST:event_loginActionPerformed

    




private void almacenarPedidos(DataRestaurante res) {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("QOMobilePU");
        EntityManager em = emf.createEntityManager();

        List<DataPedido> losPedidos = res.getPedidos();
        for (DataPedido entry : losPedidos) {
            TPedido pedido = new TPedido();
            pedido.setNumero(entry.getNumero());
            pedido.setCliente(entry.getNickNameCliente());
            pedido.setTotal(entry.getPrecioTotal());

            THistorial h = new THistorial();
            h.setNumero(entry.getNumero());
            h.setEstado(EnumEstado.PREPARACION);
            
            h.setFecha(entry.getFechaPedido());
            try {
                em.getTransaction().begin();
                em.persist(pedido);
                em.persist(h);
                em.getTransaction().commit();
            } catch (Exception e) {
                e.printStackTrace();
            }
           /*
            if(entry.getHistorial().get(0) != null){
                THistorial h1 = new THistorial();
                h1.setNumero(entry.getNumero());
                h1.setEstado(EnumEstado.ENVIADO);
                h1.setFecha(entry.getHistorial().get(0));
                try {
                    em.getTransaction().begin();
                    em.persist(h1);
                    em.getTransaction().commit();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if(entry.getHistorial().get(1) != null){
                THistorial h1 = new THistorial();
                h1.setNumero(entry.getNumero());
                h1.setEstado(EnumEstado.RECIBIDO);
                h1.setFecha(entry.getHistorial().get(1));
                try {
                    em.getTransaction().begin();
                    em.persist(h1);
                    em.getTransaction().commit();
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }*/
            List<DataPedidoProduco> prod = entry.getDataPedidoProducos();
            for (DataPedidoProduco productos : prod) {    
                TProducto p = new TProducto();
                p.setNumero(entry.getNumero());
                p.setNombre(productos.toString());
                p.setCantidad(productos.getCantidad());
                p.setPrecio(productos.getStockProduco().getPrecio());
                try {
                    em.getTransaction().begin();
                    em.persist(p);
                    em.getTransaction().commit();
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        em.close();
    }
    private static DataPedido obtenerPedido(int numero) throws FileNotFoundException{
        
       ControladorPedidoPublicadorService service =  new ControladorPedidoPublicadorService();
       ControladorPedidoPublicador port = service.getControladorPedidoPublicadorPort();
       port.seleccionarPedido(numero);
       return null;
    }

    private static void actualizarEstado(int numero, EnumEstado estado) throws FileNotFoundException, Exception_Exception {

        ControladorPedidoPublicadorService service =  new ControladorPedidoPublicadorService();
        ControladorPedidoPublicador port = service.getControladorPedidoPublicadorPort();
        port.seleccionarPedido(numero);
        port.seleccionarEstado(estado);
        port.actualizarPedido();
    }
    
    
    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed

        // RECARGAR PEDIOS
        general.removeAll();
        general.add(sesionIniciada);
        general.repaint();
        general.revalidate();
    }//GEN-LAST:event_volverActionPerformed

    private void actualizarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarEstadoActionPerformed
        try {
            estadoConexion.setText("Conectado");
            int index = cambioEstados.getSelectedIndex();
            if (index != -1) {
                int index2 = tablaPedidos.getSelectedRow();
                String aux = (String) modeloPedidos.getValueAt(index2, 0);
                Integer num = Integer.parseInt(aux);
                if (index == 0) {
                    actualizarPedido(num, proxy.EnumEstado.RECIBIDO);
                    
                } else if (index == 1) {
                    actualizarPedido(num, proxy.EnumEstado.ENVIADO);
                    
                }
            }

            int k = modeloPedidos.getRowCount();
            for (int i = k - 1; i >= 0; i--) {
                modeloPedidos.removeRow(i);
            }

            EntityManagerFactory emf = Persistence.createEntityManagerFactory("QOMobilePU");
            EntityManager em = emf.createEntityManager();
            List resultList = em.createQuery("SELECT a FROM TPedido a").getResultList();

            for (Object obj : resultList){
                String[] fila1 = new String[4];
                List lista = em.createQuery("SELECT a FROM THistorial a WHERE (a.numero = " + ((TPedido)obj).getNumero()+") ORDER BY a.estado DESC").getResultList();
                fila1[0] = "" + (Integer) ((TPedido)obj).getNumero();
                fila1[1] = ((TPedido)obj).getCliente();
                Object estado = lista.get(0);
                fila1[2] = "" + ((THistorial)estado).getEstado();
                int cantidad = lista.size() - 1;
                Object fecha = lista.get(cantidad);
                fila1[3] = "" + ((THistorial)fecha).getFecha();
                modeloPedidos.addRow(fila1);
            }
            
            general.removeAll();
            general.add(sesionIniciada);
            general.repaint();
            general.revalidate();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,"No hay conexion!");
            estadoConexion.setText("Desconectado");
        }        
    }//GEN-LAST:event_actualizarEstadoActionPerformed
    private void actualizarPedido(int numero, EnumEstado estado) throws FileNotFoundException, Exception_Exception, DatatypeConfigurationException {      
        actualizarEstado(numero,estado);  
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("QOMobilePU");
        EntityManager em = emf.createEntityManager();
        
        GregorianCalendar gregorianCalendar = new GregorianCalendar();
        DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
        XMLGregorianCalendar now = datatypeFactory.newXMLGregorianCalendar(gregorianCalendar);
        
        
        THistorial h = new THistorial();
        h.setNumero(numero);
        h.setEstado(estado);
        h.setFecha(now);
        try {
            em.getTransaction().begin();
            em.persist(h);
            em.getTransaction().commit();
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed
        int k = modeloPedidos.getRowCount();
            for (int i = k - 1; i >= 0; i--) {
                modeloPedidos.removeRow(i);
            }
        // CERRAR LA SESION
        general.removeAll();
        general.add(sesionCerrada);
        general.repaint();
        general.revalidate();
    }//GEN-LAST:event_cerrarSesionActionPerformed

    private void ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarActionPerformed
        try {
            String usu = usuarioLogeado.getText();  
            int k = modeloPedidos.getRowCount();
            for (int i = k - 1; i >= 0; i--) {
                modeloPedidos.removeRow(i);
            }
            //DESCOMENTAR CUANDO ESTEN LOS PUBLICADORES
            DataUsuario u = dataUsuario(usu);
 
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("QOMobilePU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();
            em.createQuery("DELETE FROM THistorial").executeUpdate();
            em.createQuery("DELETE FROM TPedido").executeUpdate();
            em.createQuery("DELETE FROM TProducto").executeUpdate();
            em.getTransaction().commit();
            DataRestaurante res = (DataRestaurante) u;
            estadoConexion.setText("Conectado");
            usuarioLogeado.setText(usu);
            List<DataPedido> losPedidos = res.getPedidos();
            for (DataPedido entry : losPedidos) {
                String[] fila1 = new String[4];
                fila1[0] = "" + (Integer) entry.getNumero();
                fila1[1] = entry.getNickNameCliente();
                fila1[2] = "" + entry.getEstado();
                fila1[3] = "" + entry.getFechaPedido();
                modeloPedidos.addRow(fila1);
            }
            almacenarPedidos(res);
            
            general.removeAll();
            general.add(sesionIniciada);
            general.repaint();
            general.revalidate();
        } catch (Exception ex) {
            cargarBasePedidos();
            JOptionPane.showMessageDialog(this,"No hay conexion!, imposible actualizar");
            estadoConexion.setText("Desconectado");
        }        
    }//GEN-LAST:event_ActualizarActionPerformed

    private void cargarBasePedidos(){
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("QOMobilePU");
        EntityManager em = emf.createEntityManager();
        List losPedidos = em.createQuery("SELECT a FROM TPedido a").getResultList();

        for (Object entry : losPedidos) {
            String[] fila1 = new String[4];
            int num = ((TPedido)entry).getNumero();
            fila1[0] = "" + (Integer) num;
            fila1[1] = ((TPedido)entry).getCliente();
            List lista = em.createQuery("SELECT a FROM THistorial a WHERE (a.numero = " + num +") ORDER BY a.estado DESC").getResultList();
            Object estado = lista.get(0);
            fila1[2] = ((THistorial)estado).getEstado().toString();
            int cantidad = lista.size() - 1;
            Object fecha = lista.get(cantidad);
            fila1[3] = "" + ((THistorial)fecha).getFecha();
            modeloPedidos.addRow(fila1);
        }      
        
    }
    
    private void verActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verActionPerformed
        int index = tablaPedidos.getSelectedRow();
        if (index != -1) {
            int k = medeloProductos.getRowCount();
            for (int i = k - 1; i >= 0; i--) {
                medeloProductos.removeRow(i);
            }
            k = historial.getRowCount();
            for (int i = k - 1; i >= 0; i--) {
                historial.removeRow(i);
            }
            String aux = (String) modeloPedidos.getValueAt(index, 0);
            Integer num = Integer.parseInt(aux);                    

            EntityManagerFactory emf = Persistence.createEntityManagerFactory("QOMobilePU");
            EntityManager em = emf.createEntityManager();
            Object resultado = em.createQuery("SELECT a FROM TPedido a WHERE (a.numero = " + num +")").getSingleResult();

            List lista1 = em.createQuery("SELECT a FROM TProducto a WHERE (a.numero = " + num +")").getResultList();
            for (Object obj : lista1) {
                String[] fila1 = new String[4];
                fila1[0] = ((TProducto)obj).getNombre();
                fila1[1] = "" + (Integer)((TProducto)obj).getCantidad();
                fila1[2] = "" + (Float)((TProducto)obj).getPrecio();
                fila1[3] = "" + (Float)((TProducto)obj).getPrecio() * (Integer) ((TProducto)obj).getCantidad();
                medeloProductos.addRow(fila1);
            }

            List lista2 = em.createQuery("SELECT a FROM THistorial a WHERE (a.numero = " + num +")  ORDER BY a.estado DESC").getResultList();
            for (Object obj : lista2) {
                String[] fila2 = new String[3];
                fila2[0] = ((THistorial)obj).getEstado().toString();
                fila2[1] = "" + ((THistorial)obj).getFecha();
                fila2[2] = "" + ((THistorial)obj).getNumero();
                historial.addRow(fila2);
            }
            cambioEstados.removeAllItems();
            EnumEstado e = ((THistorial)lista2.get(0)).getEstado();
            
            if (e == EnumEstado.PREPARACION) {
                cambioEstados.addItem("Enviado");
                cambioEstados.addItem("Recibido");
                actualizarEstado.setEnabled(true);
            } else if (e == EnumEstado.ENVIADO) {
                cambioEstados.addItem("Recibido");
                actualizarEstado.setEnabled(true);
            } else if (e == EnumEstado.RECIBIDO) {
                actualizarEstado.setEnabled(false);
            }

            usuario.setText(((TPedido)resultado).getCliente());
            int asd = lista2.size() - 1;
            XMLGregorianCalendar data = ((THistorial)lista2.get(asd)).getFecha();
            fecha.setText("" + data);
            precio.setText("" + ((TPedido)resultado).getTotal());


            general.removeAll();
            general.add(verPedido);
            general.repaint();
            general.revalidate();
        }                   
        
    }//GEN-LAST:event_verActionPerformed

    private void cambioEstadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambioEstadosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cambioEstadosActionPerformed

    private void userTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userTXTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QOMobileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QOMobileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QOMobileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QOMobileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QOMobileGUI().setVisible(true);
            }
        });
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actualizar;
    private javax.swing.JButton actualizarEstado;
    private javax.swing.JComboBox cambioEstados;
    private javax.swing.JButton cerrarSesion;
    private javax.swing.JLabel estadoActual;
    private javax.swing.JLabel estadoConexion;
    private javax.swing.JLabel fecha;
    private javax.swing.JPanel general;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelEstadoActual;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labelHistorial;
    private javax.swing.JLabel labelInfoPedido;
    private javax.swing.JLabel labelNuevoEstado;
    private javax.swing.JLabel labelPrecio;
    private javax.swing.JLabel labelProductos;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JButton login;
    private javax.swing.JTextField passTxt;
    private javax.swing.JLabel pedidos;
    private javax.swing.JLabel precio;
    private javax.swing.JScrollPane scrollTablaHistorial;
    private javax.swing.JScrollPane scrollTablaPedidos;
    private javax.swing.JScrollPane scrollTablaProductos;
    private javax.swing.JPanel sesionCerrada;
    private javax.swing.JPanel sesionIniciada;
    private javax.swing.JTable tablaHistorial;
    private DefaultTableModel historial;
    private javax.swing.JTable tablaPedidos;
    private DefaultTableModel modeloPedidos;
    private javax.swing.JTable tablaProductos;
    private DefaultTableModel medeloProductos;
    private javax.swing.JTextField userTXT;
    private javax.swing.JLabel usuario;
    private javax.swing.JLabel usuarioLogeado;
    private javax.swing.JButton ver;
    private javax.swing.JPanel verPedido;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables

   
    
    
    private static DataUsuario dataUsuario(java.lang.String arg0) throws Exception_Exception, FileNotFoundException {
 
        ControladorUsuarioPublicadorService service =  new ControladorUsuarioPublicadorService();
        ControladorUsuarioPublicador port = service.getControladorUsuarioPublicadorPort();
        
        return port.obtenerUsuario(arg0);
    }

    private static boolean existeNick(java.lang.String arg0) throws FileNotFoundException {

        ControladorUsuarioPublicadorService service =  new ControladorUsuarioPublicadorService();
        ControladorUsuarioPublicador port = service.getControladorUsuarioPublicadorPort();
        
        return port.existeUsuario(arg0);
    }

}
